<?xml version="1.0" encoding="utf-8"?>
<w:Workflow1 xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities" xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:w="clr-namespace:WorkflowConsoleApplicationCalculator;assembly=WorkflowConsoleApplicationCalculator" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Text</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>WorkflowConsoleApplicationCalculator</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <w:Workflow1.Implementation>
    <If>
      <If.Condition>
        <InArgument x:TypeArguments="x:Boolean">
          <mca:CSharpValue x:TypeArguments="x:Boolean">Operation.ToLower()=="add"</mca:CSharpValue>
        </InArgument>
      </If.Condition>
      <If.Then>
        <Assign>
          <Assign.To>
            <OutArgument x:TypeArguments="x:String">
              <mca:CSharpReference x:TypeArguments="x:String">Result</mca:CSharpReference>
            </OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="x:String">
              <mca:CSharpValue x:TypeArguments="x:String">(Num1+Num2).ToString()</mca:CSharpValue>
            </InArgument>
          </Assign.Value>
        </Assign>
      </If.Then>
      <If.Else>
        <If>
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <mca:CSharpValue x:TypeArguments="x:Boolean">Operation.ToLower() == "subtract"</mca:CSharpValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Assign>
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">
                  <mca:CSharpReference x:TypeArguments="x:String">Result</mca:CSharpReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">(Num1 - Num2).ToString()</mca:CSharpValue>
                </InArgument>
              </Assign.Value>
            </Assign>
          </If.Then>
          <If.Else>
            <If>
              <If.Condition>
                <InArgument x:TypeArguments="x:Boolean">
                  <mca:CSharpValue x:TypeArguments="x:Boolean">Operation.ToLower() == "multiply"</mca:CSharpValue>
                </InArgument>
              </If.Condition>
              <If.Then>
                <Assign>
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">
                      <mca:CSharpReference x:TypeArguments="x:String">Result</mca:CSharpReference>
                    </OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">(Num1 * Num2).ToString()</mca:CSharpValue>
                    </InArgument>
                  </Assign.Value>
                </Assign>
              </If.Then>
              <If.Else>
                <If>
                  <If.Condition>
                    <InArgument x:TypeArguments="x:Boolean">
                      <mca:CSharpValue x:TypeArguments="x:Boolean">Operation.ToLower() == "divide"</mca:CSharpValue>
                    </InArgument>
                  </If.Condition>
                  <If.Then>
                    <If>
                      <If.Condition>
                        <InArgument x:TypeArguments="x:Boolean">
                          <mca:CSharpValue x:TypeArguments="x:Boolean">Num2==0</mca:CSharpValue>
                        </InArgument>
                      </If.Condition>
                      <If.Then>
                        <Assign>
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">
                              <mca:CSharpReference x:TypeArguments="x:String">Result</mca:CSharpReference>
                            </OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">Infinity</InArgument>
                          </Assign.Value>
                        </Assign>
                      </If.Then>
                      <If.Else>
                        <Assign>
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">
                              <mca:CSharpReference x:TypeArguments="x:String">Result</mca:CSharpReference>
                            </OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">
                              <mca:CSharpValue x:TypeArguments="x:String">(Num1 / Num2).ToString()</mca:CSharpValue>
                            </InArgument>
                          </Assign.Value>
                        </Assign>
                      </If.Else>
                    </If>
                  </If.Then>
                </If>
              </If.Else>
            </If>
          </If.Else>
        </If>
      </If.Else>
      <sads:DebugSymbol.Symbol>9xRoqCLF0nlIKb/WFAOyJjbhrhSCRGNDOlxVc2Vyc1xBbWphZFxzb3VyY2VccmVwb3NcQ2FsY3VsYXRvcl9Xb3JrRmxvd1xXb3JrZmxvd0NvbnNvbGVBcHBsaWNhdGlvbkNhbGN1bGF0b3JcV29ya2Zsb3cxLnhhbWwZLQOcAQgCAQEwCTBiAgECNAc/EAIBR0IHmQEMAgEHPA08YQIBTTcNN1kCAUhFDUVtAgEISQtUFAIBPFcLlwEQAgENURFRZwIBQkwRTF0CAT1aEVpxAgEOXg9pGAIBMWwPlQEUAgETZhVmawIBN2EVYWECATJvFW9zAgEUcxOTARgCARl2GXZfAgEaeheDASACASqGAReRASACAR+BAUKBAUoCATB9HX1pAgErjgEdjgFzAgEliQEdiQFpAgEg</sads:DebugSymbol.Symbol>
    </If>
  </w:Workflow1.Implementation>
</w:Workflow1>